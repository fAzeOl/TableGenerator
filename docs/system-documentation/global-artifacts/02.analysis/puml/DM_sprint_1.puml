@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam classAttributeIconSize 0
left to right direction
hide circle
hide methods

' === Game title ===
class "Railroad Tycoon II" {
    - Title
}

' === Users & Roles ===
class User {
    - Username
    - Password
}

class Player {
}

class Editor {
}

User "1" -- "1 .. *" Player : has >
User "1" -- "1" Editor : has >
"Railroad Tycoon II" "1" -- "1..*" User : contains >

' === Core Entities for Editor ===
class Map {
    - Size
    - Name
}

class Location {
    - XY coordinates
}

Map "1" -- "1..*" Location : has >
Location "1" -- "1" Station : includes >
Location "1" -- "1" Industry : includes >
Location "1" -- "1" City : includes >

class Scenario {
    - Name
    - InitialBudget
}

class Restriction {
    - Temporal
    - Technological
    - Historical
    - GenerationRate
}

class City {
    - Name
    - Location (XY coordinates)
    - Population
    - ResourcesGenerated
}

class HouseBlock {
    - Size
    - Location (XY coordinates)
}

class Industry {
    - Type (Primary, Transforming, Mixed)
    - Location (XY coordinates)
    - InputResources
    - OutputProducts
}

class PrimarySectorIndustry {
}

class TransformingIndustry {
    - InputResources
    - OutputProducts
}

class MixedIndustry {
    - CargoType
}

class Cargo {
    - Weight
    - Volume
    - Destination
    - Origin
}

class Resources {
    - Quantity
    - Type
}

class Passengers {
}

class Mail {
}

class NewProduct {
}

class FinalProduct {
}

class Event {
    - Date
}

class Budget {
}

class Transaction {
    - Revenue
    - Timestamp
    - Quantity
}

Editor "1" -- "1" Scenario : creates >
Editor "1" -- "1" Map : creates >
Scenario "1" -- "1" Restriction : has >
Scenario "1..*" -- "1" Map : applied >
City "1" -- "1..*" HouseBlock : has >
HouseBlock "1" -- "1..*" Passengers : transact >
HouseBlock "1" -- "1..*" Mail : transact >
Industry "1" -- "1" PrimarySectorIndustry : can be >
PrimarySectorIndustry "1" -- "1..*" Resources : generates >
Resources "1" -- "1..*" Cargo : converted >
Cargo "1..*" -- "1..*" Station : transported >
Cargo "1" -- "1..*" TransformingIndustry : transported >
Cargo "1" -- "1..*" MixedIndustry : transported >
Cargo "1" -- "1..*" Mail : has >
Cargo "1" -- "1..*" FinalProduct : has >
Cargo "1" -- "1..*" Passengers : has >
Cargo "1" -- "1..*" NewProduct : has >
Station "1" -- "1" City : serves >
Industry "1" -- "1..*" TransformingIndustry : can be >
TransformingIndustry "1" -- "1" NewProduct : produces >
TransformingIndustry "1" -- "1" FinalProduct : produces >
Industry "1" -- "1..*" MixedIndustry : can be >
MixedIndustry "1" -- "1" Port : has <
Port "1" -- "1" Cargo : import >
Port "1" -- "1" Cargo : export <

' === Core Entities for Player ===
class RailwayNetwork {
    'Container for Routes, Lines, Trains, Stations'
}

class Route {
    - Length
}

class RailwayLine {
    - Length
    - Type (Single, Double, Electrified)
}

class Train {
    - Locomotive
    - Carriages
    - Route
    - Name
}

class Locomotive {
    - Type (Steam, Diesel, Electric)
    - Power
    - Acceleration
    - TopSpeed
    - StartYear
    - FuelCost
    - MaintenanceCost
    - AcquisitionPrice
}

class LocomotiveType {
}

class Carriage {
    - CargoType
    - Capacity
}

class Station {
    - Name
    - CargoLimit
}

class StationType {
}

class Depot {
    - Cost
    - EconomicRadius
}

class Station_ {
    - Cost
    - EconomicRadius
    - CenterDefinition
}

class Terminal {
    - Cost
    - EconomicRadius
}

class StationUpgrade {
    'Details of Building Upgrades'
    - Date
    - Perk
    - BuildingType
    - IsMutuallyExclusive
}

class RailwayLineType {
    'Details of Building Upgrades'
}

class ElectrifiedTrack {
    - single
    - double
}

class Track {
    - single
    - double
}

Player "1" -- "1" Scenario : chooses a >
Player "1" -- "1" RailwayNetwork : builds >
Player "1" -- "1..*" Route : defines >
Route "1" -- "1" RailwayNetwork : uses >
RailwayNetwork "1" -- "1..*" RailwayLine : has >
RailwayNetwork "1" -- "1..*" Station : has >
RailwayNetwork "1" -- "1..*" Train : has >
Station "1" -- "1" StationType : has >
StationType <|-- Depot
StationType <|-- Station_
StationType <|-- Terminal
Station "1" -- "1..*" Industry : serves >
Station "1" -- "1..*" StationUpgrade : has >
Train "1" -- "1..*" RailwayLine : circulates >
Train "1" -- "1" Locomotive : has >
Train "1" -- "1..*" Carriage : has >
RailwayLine "1" -- "1..*" RailwayLineType : has >
RailwayLineType "1" -- "1" ElectrifiedTrack : can be >
RailwayLineType "1" -- "1" Track : can be >
Locomotive "1" -- "1" LocomotiveType : is composed by >
LocomotiveType "1" -- "1" Diesel : can be >
LocomotiveType "1" -- "1" Steam : can be >
LocomotiveType "1" -- "1" Electric : can be >
Track "1" -- "1" Diesel : circulates <
Track "1" -- "1" Steam : circulates <
ElectrifiedTrack "1" -- "1" Diesel : circulates <
ElectrifiedTrack "1" -- "1" Steam : circulates <
ElectrifiedTrack "1" -- "1" Electric : circulates <

class Simulator {
    - PausePlay
}

Simulator "1" -- "1..*" Event : manages >
Player "1" -- "1" Simulator : runs >
Transaction "1" -- "1" Event : generates >
Event "1" -- "1..*" Budget : updates >
Station "1" -- "1..*" Transaction : generates >
Scenario "1" -- "1" Simulator : applies to >

' === Restrictions ===
Restriction "1" -- "1..*" Train : affects >
Restriction "1" -- "1..*" LocomotiveType : affects >
Restriction "1" -- "1..*" Industry : affects >
Restriction "1" -- "1..*" StationUpgrade : affects >
Restriction "1" -- "1..*" RailwayLineType : affects >
Restriction "1" -- "1..*" City : affects >

class Demand {
    - Type
    - Quantity
}

class Supply {
    - Type
    - Quantity
}

City "1" -- "1" Demand : has >
City "1" -- "1" Supply : has >
Industry "1" -- "1" Demand : has >
Industry "1" -- "1" Supply : has >

Scenario "1" -- "1..*" Event : generates >

Industry "1" -- "1..*" Event : generates >
City "1" -- "1..*" Event : generates >

Event "1" -- "1..*" Demand : influence > 
Event "1" -- "1..*" Supply : influence >

Event "1" -- "1.." Cargo: generate >

@enduml
