@startuml
skinparam monochrome false
skinparam packageStyle rectangle
skinparam shadowing false
skinparam classAttributeIconSize 0
left to right direction
hide circle
hide methods

' === Game title ===
class "Railroad Tycoon II" {
    title
}

' === Users & Roles ===
class User {
    username
    password
}

class Player {
}

class Editor {
}

User "1" -- "1 .. *" Player
User "1" -- "1" Editor
"Railroad Tycoon II" "1" -- "1..*" User

' === Core Entities for Editor ===
class Map {
    size
    name
}

class Location {
    xCoordinates
    yCoordinates
}

Map "1" -- "1..*" Location
Location "1" -- "1" Station
Location "1" -- "1" Industry
Location "1" -- "1" City

class Scenario {
    name
    initialBudget
    description
    objective
}

class Restriction {
    temporal
    technological
    historical
    generationRate
}

class City {
    name
    location
    population
    resourcesGenerated
    typesOfResourcesGenerated
}

class HouseBlock {
    size
    location
}

class Industry {
    type
    location
    inputResources
    outputProducts
    industryCapacity
    productionRate
}

class PrimarySectorIndustry {
}

class TransformingIndustry {
    inputResources
    outputProducts
}

class MixedIndustry {
    cargoType
}

class Cargo {
    weight
    volume
    destination
    origin
    type
}

class Resources {
    quantity
    type
}

class Passengers {
}

class Mail {
}

class NewProduct {
}

class FinalProduct {
}

class Event {
    date
    type
    description
}

class Budget {
}

class Transaction {
    revenue
    timestamp
    quantity
}

Editor "1" -- "1" Scenario
Editor "1" -- "1" Map
Scenario "1" -- "1" Restriction
Scenario "1..*" -- "1" Map
City "1" -- "1..*" HouseBlock
HouseBlock "1" -- "1..*" Passengers
HouseBlock "1" -- "1..*" Mail
Industry "1" -- "1" PrimarySectorIndustry
PrimarySectorIndustry "1" -- "1..*" Resources
Resources "1" -- "1..*" Cargo
Cargo "1..*" -- "1..*" Station
Cargo "1" -- "1..*" TransformingIndustry
Cargo "1" -- "1..*" MixedIndustry
Cargo "1" -- "1..*" Mail
Cargo "1" -- "1..*" FinalProduct
Cargo "1" -- "1..*" Passengers
Cargo "1" -- "1..*" NewProduct
Station "1" -- "1" City
Industry "1" -- "1..*" TransformingIndustry
TransformingIndustry "1" -- "1" NewProduct
TransformingIndustry "1" -- "1" FinalProduct
Industry "1" -- "1..*" MixedIndustry
MixedIndustry "1" -- "1" Port
Port "1" -- "1" Cargo
Port "1" -- "1" Cargo

' === Core Entities for Player ===
class RailwayNetwork {
    'Container for Routes, Lines, Trains, Stations'
}

class Route {
    length
    startStation
    endStation
}

class RailwayLine {
    length
    type
}

class Train {
    locomotive
    carriages
    route
    name
}

class TrainDegradation {
    severity
    cause
}

TrainDegradation -- Profit
Route -- TrainDegradation
class Locomotive {
    type
    power
    acceleration
    topSpeed
    startYear
    fuelCost
    maintenanceCost
    acquisitionPrice
}

class LocomotiveType {
}

class Carriage {
    cargoType
    capacity
    weight
    volume
}

class Station {
    name
    year
    month
    cargoLimit
    economicRadius
    upgradeOptions
}

class StationType {
}

class Depot {
    cost
    economicRadius
}

class Station_ {
    cost
    economicRadius
    centerDefinition
}

class Terminal {
    cost
    economicRadius
}

class StationUpgrade {
    'Details of Building Upgrades'
    date
    perk
    buildingType
    isMutuallyExclusive
}

class RailwayLineType {
    'Details of Building Upgrades'
}

class ElectrifiedTrack {

}

class NonElectrifiedTrack {
    type
}

Player "1" -- "1" Scenario
Player "1" -- "1" RailwayNetwork
Player "1" -- "1..*" Route
Route "1" -- "1" RailwayNetwork
RailwayNetwork "1" -- "1..*" RailwayLine
RailwayNetwork "1" -- "1..*" Station
RailwayNetwork "1" -- "1..*" Train
Station "1" -- "1" StationType
StationType -- Depot
StationType -- Station_
StationType -- Terminal
Station "1" -- "1..*" Industry
Station "1" -- "1..*" StationUpgrade
Train "1" -- "1..*" RailwayLine
Train "1" -- "1" Locomotive
Train "1" -- "1..*" Carriage
RailwayLine "1" -- "1..*" RailwayLineType
RailwayLineType "1" -- "1" ElectrifiedTrack
RailwayLineType "1" -- "1" NonElectrifieTrack
Locomotive "1" -- "1" LocomotiveType
LocomotiveType -- DieselLocomotiveType
LocomotiveType -- SteamLocomotiveType
LocomotiveType -- ElectricLocomotiveType
NonElectrifieTrack "1" -- "1" DieselLocomotiveType
NonElectrifieTrack "1" -- "1" SteamLocomotiveType
ElectrifiedTrack "1" -- "1" DieselLocomotiveType
ElectrifiedTrack "1" -- "1" SteamLocomotiveType
ElectrifiedTrack "1" -- "1" ElectricLocomotiveType

class Simulator {
    pausePlay
}

Simulator "1" -- "1..*" Event
Player "1" -- "1" Simulator
Transaction "1" -- "1" Event
Event "1" -- "1..*" Budget
Station "1" -- "1..*" Transaction
Scenario "1" -- "1" Simulator

' === Restrictions ===
Restriction "1" -- "1..*" Train
Restriction "1" -- "1..*" LocomotiveType
Restriction "1" -- "1..*" Industry
Restriction "1" -- "1..*" StationUpgrade
Restriction "1" -- "1..*" RailwayLineType
Restriction "1" -- "1..*" City

class Demand {
    type
    quantity
}

class Supply {
    type
    quantity
}

City "1" -- "1" Demand
City "1" -- "1" Supply
Industry "1" -- "1" Demand
Industry "1" -- "1" Supply

Scenario "1" -- "1..*" Event

Industry "1" -- "1..*" Event
City "1" -- "1..*" Event

Event "1" -- "1..*" Demand
Event "1" -- "1..*" Supply

Event "1" -- "1.." Cargo

' === Unified Analysis ===
package AnalysisModule {
    abstract class Analysis {
        type
        description
    }

    class StatisticalAnalysis {
        mean
        median
        mode
        standardDeviation
    }

    class PassengerAnalysis {
        passengerCount
        peakHours
    }

    class CargoAnalysis {
        cargoWeight
        cargoVolume
    }

    class DistributionAnalysis {
        distributionPattern
        efficiency
    }
    class Metrics {
      mean
      median
      mode
      standardDeviation
    }

    Analysis <|-- StatisticalAnalysis
    Analysis <|-- PassengerAnalysis
    Analysis <|-- CargoAnalysis
    Analysis <|-- DistributionAnalysis
    Analysis "1" <|-- "1..*" Metrics : calculates >
}

Station "1" -- "1..*" Analysis
RailwayNetwork "1" -- "1" GraphRepresentation

class Maintenance {

}

class GraphRepresentation {

}

' === Profit as aggregator ===
class Profit {
    +revenue
    +costs
    +netProfit
    +year
}

Profit "1" -- "0..*" Transaction
Profit "1" -- "0..*" Train
Profit "1" -- "1" RailwayNetwork

Event "1" -- "1" Profit
Profit "1" -- "1" Budget
Maintenance "1" -- "1..*" RailwayLine
Maintenance "1" -- "1" Profit
Scenario "1" -- "1" TrainDegradation

@enduml