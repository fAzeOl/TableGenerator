@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Editor" as EDITOR
participant ":CreateMapUI" as UI
participant ":CreateMapController" as CTRL
participant "Repositories" as REPOS
participant "repositories\n:Repositories" as REPOS_SINGLETON
participant "Service\n:MapService" as SERVICE
participant "MapMapper" as MAPPER
participant "dto:MapDTO" as DTO
participant "map\n:Map" as MAP
participant "mapRepository\n:MapRepository" as MAP_REPO
activate EDITOR

    EDITOR -> UI : asks to create a new map
    activate UI
        UI --> CTRL** : create()
        deactivate CTRL

        UI --> EDITOR : requests map name, width, height and scale
    deactivate UI

EDITOR -> UI : types requested data (mapName, width, height and scale)

activate UI
    UI -> UI : UI keeps typed data
    UI --> EDITOR : shows all data and requests confirmation
deactivate UI

EDITOR -> UI : confirms data
activate UI
    UI -> CTRL : createMap(dto)
    note right of CTRL
            DTO has all required data (mapName, width, height, scaleInKmPerCell)
        end note
    activate CTRL

        CTRL -> REPOS : getInstance()
        activate REPOS
            REPOS --> CTRL : repositories
        deactivate REPOS

        CTRL -> REPOS_SINGLETON : getMapRepository()
        activate REPOS_SINGLETON
            REPOS_SINGLETON --> CTRL : mapRepository
        deactivate REPOS_SINGLETON


            CTRL -> SERVICE : map = createMap(dto)

            activate SERVICE
                SERVICE -> MAPPER : toDomain(dto)
                activate MAPPER

                    MAPPER -> DTO : name = getName()
                    activate DTO
                    MAPPER -> DTO : width = getWidth()
                    MAPPER -> DTO : height = getHeight()
                    MAPPER -> DTO : scale = getScaleInKmPerCell()
                    deactivate DTO
                    MAPPER -> MAP : create(name, width, height, scale)
                    MAPPER --> SERVICE : map
                deactivate MAPPER


                SERVICE -> MAP_REPO : getMapByName(dto.name)
                activate MAP_REPO
                MAP_REPO -> MAP_REPO : validateName(mapName)
                MAP_REPO --> MAP_REPO : true
                MAP_REPO --> SERVICE : mapName
                deactivate MAP_REPO

                SERVICE -> MAP_REPO : addMap(map)
                activate MAP_REPO
                    MAP_REPO --> SERVICE : success
                deactivate MAP_REPO
                SERVICE --> CTRL : map
            deactivate SERVICE

        CTRL --> UI : map
    deactivate CTRL

    UI --> EDITOR : displays operation success
deactivate UI

deactivate EDITOR
@enduml